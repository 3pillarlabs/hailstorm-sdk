# frozen_string_literal: true

require 'fileutils'
require 'hailstorm'
require 'hailstorm/model'
require 'hailstorm/behavior/loggable'
require 'hailstorm/behavior/clusterable'
require 'hailstorm/behavior/provisionable'
require 'hailstorm/behavior/sshable'
require 'hailstorm/model/helper/amazon_cloud_defaults'
require 'hailstorm/model/concern/abstract_clusterable'
require 'hailstorm/model/concern/abstract_provisionable'
require 'hailstorm/support/ssh'
require 'hailstorm/support/waiter'
require 'hailstorm/support/aws_adapter'
require 'hailstorm/model/helper/vpc_helper'
require 'hailstorm/model/helper/aws_identity_helper'
require 'hailstorm/model/helper/security_group_finder'
require 'hailstorm/model/helper/security_group_creator'
require 'hailstorm/model/helper/ec2_instance_helper'
require 'hailstorm/model/helper/ami_helper'
require 'hailstorm/support/amazon_account_cleaner'

# Represents state and behavior for Amazon Web Services (AWS) cluster
# @author Sayantam Dey
class Hailstorm::Model::AmazonCloud < ActiveRecord::Base
  include Hailstorm::Behavior::Loggable
  include Hailstorm::Behavior::Clusterable
  include Hailstorm::Behavior::Provisionable
  include Hailstorm::Behavior::SSHable

  DEFAULTS = Hailstorm::Model::Helper::AmazonCloudDefaults

  before_validation :set_defaults

  validates_presence_of :access_key, :secret_key, :region

  validates_presence_of :agent_ami, if: ->(r) { r.active? && r.ssh_port && r.ssh_port != DEFAULTS::SSH_PORT }

  validate :identity_file_exists, if: proc { |r| r.active? && r.autogenerated_ssh_key? }

  validate :identity_file_ok, if: proc { |r| r.active? && !r.autogenerated_ssh_key? && r.ssh_identity }

  before_save :assign_vpc_subnet, if: ->(r) { r.active? && r.vpc_subnet_id.blank? }

  before_save :set_availability_zone, if: proc { |r| r.active? }

  before_save :create_security_group, if: proc { |r| r.active? }

  before_save :create_agent_ami, if: proc { |r| r.active? && r.agent_ami.nil? }

  after_destroy :cleanup

  # (see Hailstorm::Behavior::Clusterable#slug)
  def slug
    @slug ||= "#{self.class.name.demodulize.titlecase}, region: #{self.region}"
  end

  # (see Hailstorm::Behavior::Clusterable#public_properties)
  def public_properties
    columns = [:region]
    self.attributes.symbolize_keys.slice(*columns)
  end

  # @return [String] prefix for AMI name
  def ami_prefix
    DEFAULTS::AMI_ID
  end

  # @return [Hailstorm::Model::Helper::AmiHelper]
  def ami_helper
    helper_attrs = {}
    add_method_attrs!(helper_attrs, :ec2_instance_helper, :security_group_finder)
    helper_group = Hailstorm::Model::Helper::AmiHelper::MemberHelperGroup.new(helper_attrs)

    client_attrs = { ami_client: client_factory.ami_client }
    add_method_attrs!(client_attrs, :instance_client)
    client_group = Hailstorm::Model::Helper::AmiHelper::ClientGroup.new(client_attrs)

    Hailstorm::Model::Helper::AmiHelper.new(aws_clusterable: self,
                                            helper_group: helper_group,
                                            client_group: client_group)
  end

  include Hailstorm::Model::Concern::AbstractClusterable

  # Delete SSH key-pair and identity once all load agents have been terminated
  # (see Hailstorm::Behavior::Clusterable#cleanup)
  def cleanup
    logger.debug { "#{self.class}##{__method__}" }
    return unless self.active? && self.autogenerated_ssh_key? && self.load_agents.reload.empty?

    key_pair_id = client_factory.key_pair_client.find(name: self.ssh_identity)
    return unless key_pair_id

    client_factory.key_pair_client.delete(key_pair_id: key_pair_id)
    FileUtils.safe_unlink(identity_file_path)
  end

  # Purges the Amazon accounts used of Hailstorm related artifacts
  def purge(cleaner = nil)
    logger.debug { "#{self}.#{__method__}" }
    cleaner ||= Hailstorm::Support::AmazonAccountCleaner.new(client_factory: client_factory,
                                                             region_code: self.region,
                                                             resource_group: resources_to_purge)
    cleaner.cleanup
    self.update_column(:agent_ami, nil)
    self.update_column(:vpc_subnet_id, nil)
  end

  include Hailstorm::Model::Concern::AbstractProvisionable

  ######################### PRIVATE METHODS ####################################
  private

  def resources_to_purge
    resource_group_attrs = { instance_ids: self.load_agents.map(&:identifier),
                             ami_id: self.agent_ami,
                             security_group_name: self.security_group }

    resource_group_attrs[:key_pair_name] = self.ssh_identity if self.autogenerated_ssh_key?
    unless self.vpc_subnet_id.nil?
      resource_group_attrs[:subnet_id] = self.vpc_subnet_id
      vpc_helper = Hailstorm::Model::Helper::VpcHelper.new(subnet_client: subnet_client)
      resource_group_attrs[:vpc_id] = vpc_helper.find_vpc_from_subnet(subnet_id: self.vpc_subnet_id)
    end

    Hailstorm::Support::AmazonAccountCleaner::AccountResourceGroup.new(resource_group_attrs)
  end

  def add_method_attrs!(attrs, *keys)
    keys.each { |key| attrs[key] = send(key) }
  end

  def set_defaults
    self.security_group = DEFAULTS::SECURITY_GROUP if self.security_group.blank?
    self.user_name ||= DEFAULTS::SSH_USER
    self.instance_type ||= DEFAULTS::INSTANCE_TYPE
    self.max_threads_per_agent ||= default_max_threads_per_agent
    self.region ||= DEFAULTS::EC2_REGION
    return if self.ssh_identity

    self.ssh_identity = [DEFAULTS::SSH_IDENTITY, self.project.project_code].join('_')
    self.autogenerated_ssh_key = true
  end

  def client_factory
    Hailstorm::Support::AwsAdapter.clients(aws_config)
  end

  def aws_config
    @aws_config ||= {
      access_key_id: self.access_key,
      secret_access_key: self.secret_key,
      region: self.region,
      logger: logger
    }
  end

  # @return [Hailstorm::Behavior::AwsAdaptable::InstanceClient]
  def instance_client
    @instance_client ||= client_factory.instance_client
  end

  # @return [Hailstorm::Behavior::AwsAdaptable::SecurityGroupClient]
  def security_group_client
    @security_group_client ||= client_factory.security_group_client
  end

  # @return [Hailstorm::Behavior::AwsAdaptable::Ec2Client]
  def ec2_client
    @ec2_client ||= client_factory.ec2_client
  end

  # @return [Hailstorm::Behavior::AwsAdaptable::SubnetClient]
  def subnet_client
    @subnet_client ||= client_factory.subnet_client
  end

  def security_group_finder
    attrs = { aws_clusterable: self }
    add_method_attrs!(attrs, :security_group_client, :subnet_client)
    Hailstorm::Model::Helper::SecurityGroupFinder.new(attrs)
  end

  def ec2_instance_helper
    Hailstorm::Model::Helper::Ec2InstanceHelper.new(aws_clusterable: self, instance_client: instance_client)
  end

  # Sets the first available zone based on configured region
  # only if the project is configured in master slave mode
  def set_availability_zone
    logger.debug { "#{self.class}##{__method__}" }
    return unless self.zone.blank? && self.project.master_slave_mode?

    self.zone = ec2_client.first_available_zone
  end

  def default_max_threads_per_agent
    DEFAULTS.calc_max_threads_per_instance(instance_type: self.instance_type)
  end

  def assign_vpc_subnet
    attrs = {}
    keys = %i[internet_gateway_client route_table_client vpc_client subnet_client]
    keys.each { |key| attrs[key] = client_factory.send(key) }
    vpc_helper = Hailstorm::Model::Helper::VpcHelper.new(attrs)
    self.vpc_subnet_id = vpc_helper.find_or_create_vpc_subnet(subnet_name_tag: DEFAULTS::SUBNET_NAME,
                                                              vpc_name_tag: DEFAULTS::VPC_NAME,
                                                              cidr: DEFAULTS::CIDR_BLOCK)
  end

  def identity_file_name
    [File.basename(self.ssh_identity).gsub(/\.pem/, ''), self.region].join('_').concat('.pem', '')
  end

  def identity_file_exists
    attrs = { key_pair_client: client_factory.key_pair_client }
    add_method_attrs!(attrs, :ssh_identity, :identity_file_path)
    identity_helper = Hailstorm::Model::Helper::AwsIdentityHelper.new(attrs)
    identity_helper.validate_or_create_identity
  end

  def create_security_group
    logger.debug { "#{self.class}##{__method__}" }
    attrs = { aws_clusterable: self }
    add_method_attrs!(attrs, :subnet_client, :security_group_client)
    sg_creator = Hailstorm::Model::Helper::SecurityGroupCreator.new(attrs)
    sg_creator.create_security_group
  end

  # creates the agent ami
  def create_agent_ami
    ami_helper.create_agent_ami!
  end

  include Hailstorm::Support::Waiter
end
